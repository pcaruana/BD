#!/usr/bin/env ruby
#require 'bundler/setup'

require 'optparse'
require 'installer'
require 'installer/assistant'
require 'installer/config'
require 'installer/helpers'
require 'installer/subscription'
require 'installer/workflow'
require 'pathname'

include Installer::Helpers

installer_context = ENV.has_key?('OO_INSTALL_CONTEXT') ? ENV['OO_INSTALL_CONTEXT'].to_sym : :origin
openshift_version = ENV.has_key?('OO_VERSION') ? ENV['OO_VERSION'] : ''
installer_version = ENV.has_key?('OO_INSTALL_VERSION') ? ENV['OO_INSTALL_VERSION'] : ''

# Catch a bogus ENV-supplied installer context straight away
if not supported_contexts.include?(installer_context)
  puts "Installer context '#{installer_context.to_s}' is not supported. Legal values are: #{supported_contexts.map{ |c| c.to_s }.join(', ')}."
  exit 1
end

options = {
  :workflow_id => nil,
  :config_file => nil,
  :subscription_type => nil,
  :rh_username => nil,
  :rh_password => nil,
  :advanced_mode => false,
  :advanced_repo_config => false,
  :list_workflows => false,
  :debug => false,
  :keep_puppet => false,
  :force_install => false,
}

# Parse the command line options
p = OptionParser.new do |opts|
  opts.banner = "Usage: oo-install [args]"
  opts.separator ''
  opts.on('-a', '--advanced-mode', 'Enable access to message server and db server customization.') do |advanced_mode|
    options[:advanced_mode] = advanced_mode
  end
  opts.on('-r', '--advanced-repo-config', 'Enable access to advanced repository configuration.') do |advanced_repo_config|
    options[:advanced_repo_config] = advanced_repo_config
  end
  opts.on('-c', '--config-file FILEPATH', 'The path to an alternate config file') do |filepath|
    options[:config_file] = File.expand_path(filepath)
  end
  opts.on('-w', '--workflow WORKFLOW_ID', 'The installer workflow for unattended deployment.') do |workflow_id|
    options[:workflow_id] = workflow_id
  end
  opts.on('--force', 'For unattended deployments, ignore warnings and automatically install missing RPMs') do |force_install|
    options[:force_install] = force_install
  end
  opts.on('-l', '--list-workflows', 'List the workflow IDs available for use with unattended deployment.') do |flag|
    options[:list_workflows] = flag
  end
  opts.on('-e', '--enterprise-mode', 'Show OpenShift Enterprise options (ignored in unattended mode)') do |flag|
    installer_context = :ose
  end
  opts.on('-s', '--subscription-type TYPE', "The software source for installation packages.") do |subscription_type|
    options[:subscription_type] = subscription_type.to_sym
  end
  opts.on('-u', '--username USERNAME', 'Red Hat Login username') do |username|
    options[:rh_username] = username
  end
  opts.on('-p', '--password PASSWORD', 'Red Hat Login password') do |password|
    options[:rh_password] = password
  end
  opts.on('--use-existing-puppet', 'For Origin; do not attempt to install the Puppet module') do |keep_puppet|
    options[:keep_puppet] = keep_puppet
  end
  opts.on('-d', '--debug', 'Enable debugging messages') do |debug|
    options[:debug] = debug
  end
end

begin
  p.parse!(ARGV)
rescue OptionParser::MissingArgument => e
  puts "One of the oo-install arguments is missing a value - #{e.message}"
  puts p
  exit 1
rescue OptionParser::InvalidArgument => e
  puts "The value for one of the oo-install arguments does not match the required format - #{e.message}"
  puts p
  exit 1
rescue OptionParser::InvalidOption => e
  puts "An invalid option was passed to oo-install - #{e.message}"
  puts p
  exit 1
end

# Set the installer context
set_context(installer_context)

# Set the debug level
set_debug(options[:debug])

# Set the 'keep puppet' flag
set_keep_puppet(options[:keep_puppet])

# Set the 'force install' flag
set_force_install(options[:force_install])

set_advanced_repo_config(options[:advanced_repo_config])

# Before we go any deeper, splat out workflow IDs and exit if '-l' was passed.
if options[:list_workflows]
  puts "\nThe workflow IDs available for use with the '-w' setting are as follows:\n\n"
  Installer::Workflow.list(installer_context).sort_by{ |w| w.id }.each do |workflow|
    puts "#{workflow.id}\n#{wrap_long_string(workflow.description)}\n\n"
  end
  exit 0
end

# All sanity checking has to happen after the arguments are gathered.
if not options[:workflow_id].nil? and not Installer::Workflow.ids.include?(options[:workflow_id])
  puts "Unknown workflow ID '#{options[:workflow_id]}'. Valid values are:\n\n#{Installer::Workflow.list(installer_context).sort_by{ |w| w.id }.map{ |w| "* #{w.id}" }.join("\n")}\n\nExiting."
  exit 1
end
if options[:subscription_type].nil? and (not options[:rh_username].nil? or not options[:rh_password].nil?)
  puts "Pass a subscription type to associate with the provided username and/or password."
  exit 1
elsif not options[:subscription_type].nil?
  subscription_types = Installer::Subscription.valid_types_for_context
  if not subscription_types.include?(options[:subscription_type].to_sym)
    version = get_context == :ose ? 'Enterprise' : 'Origin'
    valid_types = subscription_types.map{ |t| t.to_s }.join(", ")
    puts "Subscription type '#{options[:subscription_type]}' not supported for OpenShift #{version}.\nValid values are: #{valid_types}. Exiting."
    exit 1
  end
end

# If the config file argument was passed, make sure it is usable.
if not options[:config_file].nil?
  pn = Pathname.new(options[:config_file])
  if pn.exist?()
    if not pn.readable?()
      puts "Config file '#{options[:config_file]}' is not readable. Exiting."
      exit 1
    end
  else
    puts "Attempting to create and use new config file at '#{options[:config_file]}'."
  end
end

# Try to instantiate the config object
begin
  @config = Installer::Config.new(options[:config_file])
rescue Errno::ENOENT => e
  if not options[:config_file].nil?
    puts "ERROR: The configuration file could not be created at '#{options[:config_file]}'.\nEnsure that the path exists and is writeable."
  else
    puts "ERROR: The default configuration file could not be created at '~/.openshift/oo-install-cfg.yml'.\nEnsure that the home directory is writeable or provide an alternate location."
  end
  exit 1
end
if not @config.is_valid?
  puts "Could not process config file at '#{@config.file_path}'. Exiting."
  exit 1
end

# Have a quick look at the deployment.
# We need to figure out if the deployment setup is forcing us to use advanced mode
@deployment = @config.get_deployment
if not options[:advanced_mode] and @deployment.is_advanced?
  options[:advanced_mode] = true
  puts "The detected deployment is an advanced-mode deployment.\nAutomatically switching to advanced mode.\n\n"
end
# Now set the interface mode
set_mode(options[:advanced_mode])

# Instantiate the cli-provided subscription info in a subscription object
cli_subscription = Installer::Subscription.new(@config)
cli_subscription.subscription_type = options[:subscription_type]
cli_subscription.rh_username = options[:rh_username]
cli_subscription.rh_password = options[:rh_password]

# Set up the assistant and get going
begin
  @assistant = Installer::Assistant.new(@config, @deployment, options[:workflow_id], cli_subscription, openshift_version, installer_version)
rescue Installer::UnrecognizedContextException => e
  puts "\n#{e.message}"
  exit
end
loop do
  begin
    @result = @assistant.run
    if not @result.nil?
      break
    end
  rescue Interrupt => e
    puts "\nExiting oo-install at user request."
    break
  rescue Installer::AssistantRestartException => e
    # Nothing to do; this will just carry us around to the main menu.
  rescue Installer::AssistantMissingUtilityException => e
    puts "\n#{e.message}"
    break
  rescue Installer::DeploymentCheckFailedException => e
    puts "\n#{e.message}"
    break
  rescue Installer::AssistantWorkflowCompletedException => e
    puts "\nAll tasks completed."
    break
  rescue Installer::AssistantWorkflowNonDeploymentCompletedException => e
    break
  end
end

exit @result.nil? ? 0 : @result
